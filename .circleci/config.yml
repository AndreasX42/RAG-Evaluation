version: 2.1

executors:
  python-docker-executor:
    docker:
      - image: cimg/python:3.11

jobs:
  # first we build and push the new Docker images to Docker Hub
  push_app_image:
    executor: python-docker-executor
    steps:
      - checkout
      - set_env_vars
      - docker_login
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Inject build info into frontend
          command: |
            sed -i "s/\$BUILD_NUMBER/${PIPELINE_NUMBER}/g" ./app/main.py
            sed -i "s/\$BUILD_DATE/${NOW}/g" ./app/main.py
            sed -i "s/\$GIT_SHA/${TAG}/g" ./app/main.py
      - run:
          name: Push app image
          command: |
            docker build -t $DOCKER_USER/$IMAGE_NAME_BASE-app:$TAG -t $DOCKER_USER/$IMAGE_NAME_BASE-app:latest ./app
            docker push $DOCKER_USER/$IMAGE_NAME_BASE-app:$TAG
            docker push $DOCKER_USER/$IMAGE_NAME_BASE-app:latest
  push_ragflow_image:
    executor: python-docker-executor
    steps:
      - checkout
      - set_env_vars
      - docker_login
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Push ragflow image
          command: |
            docker build -t $DOCKER_USER/$IMAGE_NAME_BASE-backend:$TAG -t $DOCKER_USER/$IMAGE_NAME_BASE-backend:latest ./ragflow
            docker push $DOCKER_USER/$IMAGE_NAME_BASE-backend:$TAG
            docker push $DOCKER_USER/$IMAGE_NAME_BASE-backend:latest
  push_vectorstore_image:
    executor: python-docker-executor
    steps:
      - checkout
      - set_env_vars
      - docker_login
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Push vectorstore image
          command: |
            docker build -t $DOCKER_USER/$IMAGE_NAME_BASE-vectorstore:$TAG -t $DOCKER_USER/$IMAGE_NAME_BASE-vectorstore:latest ./vectorstore
            docker push $DOCKER_USER/$IMAGE_NAME_BASE-vectorstore:$TAG
            docker push $DOCKER_USER/$IMAGE_NAME_BASE-vectorstore:latest
  push_test_image:
    executor: python-docker-executor
    steps:
      - checkout
      - set_env_vars
      - docker_login
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Push test image
          command: |
            docker build -t $DOCKER_USER/$IMAGE_NAME_BASE-test:$TAG -t $DOCKER_USER/$IMAGE_NAME_BASE-test:latest ./tests
            docker push $DOCKER_USER/$IMAGE_NAME_BASE-test:$TAG
            docker push $DOCKER_USER/$IMAGE_NAME_BASE-test:latest
  
  # then we run tests on the new Docker images
  run_integration_tests:
    machine: true
    steps:
      - checkout
      - run:
          name: Clear Docker cache
          command: docker system prune --all --force --volumes
      - run:
          name: Run Docker Compose to build, start and test
          command: | 
            docker-compose -f docker-compose.integration.test.yaml up --exit-code-from test-suite
      - run:
          name: Shut services down
          command: docker-compose -f docker-compose.integration.test.yaml down
      - store_artifacts:
          path: /tests/test-reports
          destination: test-reports

  # if everything was successful we deploy the Docker images into the k8s cluster
  deploy_to_gke_k8s_cluster:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - set_env_vars
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Setup Google Cloud SDK
          command: |
            echo "$GOOGLE_SERVICE_KEY" > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud config set project "$GOOGLE_PROJECT_ID"
            gcloud config set compute/zone "$GOOGLE_COMPUTE_ZONE"
            gcloud container clusters get-credentials "$GKE_CLUSTER_NAME"
      - run:
          name: Deploy to GKE k8s cluster
          command: |
            kubectl apply -f ./k8s
            kubectl set image deployments/app-deployment app-frontend=$DOCKER_USER/$IMAGE_NAME_BASE-app:$TAG
            kubectl set image deployments/backend-deployment ragflow-backend=$DOCKER_USER/$IMAGE_NAME_BASE-backend:$TAG
            kubectl set image deployments/vectorstore-deployment chromadb-vectorstore=$DOCKER_USER/$IMAGE_NAME_BASE-vectorstore:$TAG

workflows:
  version: 2
  build-deploy:
    jobs:
      - push_app_image
      - push_ragflow_image
      - push_vectorstore_image
      - push_test_image
      - run_integration_tests:
          requires:
                - push_app_image
                - push_ragflow_image
                - push_vectorstore_image
                - push_test_image
      - deploy_to_gke_k8s_cluster:
          requires:
            - run_integration_tests

commands:
  set_env_vars:
    steps:
      - run:
          name: Setup tag and base image name
          command: |
            echo 'export TAG=${CIRCLE_SHA1:0:8}' >> $BASH_ENV
            echo 'export IMAGE_NAME_BASE=ragflow' >> $BASH_ENV
            echo 'export NOW=$(date --utc +"%Y-%m-%d %H:%M:%S")' >> $BASH_ENV
            echo 'export PIPELINE_NUMBER=<< pipeline.number >>' >> $BASH_ENV
  docker_login:
    steps:
      - run:
          name: Login into Docker Hub
          command: |
            echo "$DOCKER_PWD" | docker login --username "$DOCKER_USER" --password-stdin